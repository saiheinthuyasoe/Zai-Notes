`useRef` is a powerful hook in React that serves specific purposes. Here are the main scenarios when you would use `useRef`:

### 1. **Accessing DOM Elements Directly**

`useRef` can be used to directly access and interact with DOM elements. This is useful for operations like focusing an input, playing a video, or handling animations.

#### Example: Focusing an Input

```javascript
import React, { useRef, useEffect } from 'react';

function FocusInput() {
  const inputRef = useRef(null);

  useEffect(() => {
    inputRef.current.focus();
  }, []);

  return <input ref={inputRef} type="text" placeholder="Focus me on mount" />;
}

export default FocusInput;
```

### 2. **Storing Mutable Values that Persist Across Renders**

You can use `useRef` to store any mutable value that should persist across renders without triggering a re-render when it changes. This is useful for storing things like timers, previous state values, or any other value that doesn't affect the UI directly.

#### Example: Storing a Timer ID

```javascript
import React, { useRef, useState, useEffect } from 'react';

function Timer() {
  const [seconds, setSeconds] = useState(0);
  const timerRef = useRef(null);

  useEffect(() => {
    timerRef.current = setInterval(() => {
      setSeconds(prev => prev + 1);
    }, 1000);

    return () => clearInterval(timerRef.current);
  }, []);

  return (
    <div>
      <p>Seconds: {seconds}</p>
      <button onClick={() => clearInterval(timerRef.current)}>Stop Timer</button>
    </div>
  );
}

export default Timer;
```

### 3. **Keeping Track of Previous State Values**

You can use `useRef` to keep track of the previous state or prop values without causing a re-render.

#### Example: Tracking Previous State

```javascript
import React, { useState, useEffect, useRef } from 'react';

function PreviousStateExample() {
  const [count, setCount] = useState(0);
  const prevCountRef = useRef();

  useEffect(() => {
    prevCountRef.current = count;
  }, [count]);

  return (
    <div>
      <p>Current Count: {count}</p>
      <p>Previous Count: {prevCountRef.current}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

export default PreviousStateExample;
```

### 4. **Avoiding Re-renders with Mutable Objects**

In some cases, you need to use a mutable object that should not cause a component to re-render when updated. This is often used in more complex scenarios involving custom hooks or performance optimizations.

#### Example: Using `useRef` in Custom Hooks

```javascript
import React, { useRef, useState, useEffect } from 'react';

function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

function ExampleComponent() {
  const [count, setCount] = useState(0);
  const prevCount = usePrevious(count);

  return (
    <div>
      <p>Current Count: {count}</p>
      <p>Previous Count: {prevCount}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

export default ExampleComponent;
```

### Summary

- **Accessing DOM Elements**: Use `useRef` to directly interact with DOM elements, such as focusing an input or manipulating other DOM nodes.
- **Storing Mutable Values**: Use `useRef` to store values that need to persist across renders without causing a re-render, such as timers or other mutable state that doesnâ€™t affect the UI.
- **Tracking Previous State**: Use `useRef` to keep track of previous state or prop values.
- **Avoiding Re-renders**: Use `useRef` when you need a mutable object that should not trigger a re-render when it changes, often in custom hooks or for performance optimizations.

By using `useRef` appropriately, you can manage state and DOM interactions more effectively, leading to cleaner and more efficient React components.