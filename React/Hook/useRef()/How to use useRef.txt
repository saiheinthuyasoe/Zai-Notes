Using `useRef` in React involves creating a reference to a DOM element or a mutable value that you want to persist across re-renders. Here are the steps and examples to illustrate how to use `useRef`:

### 1. **Create the Ref**

First, import `useRef` from React and initialize a ref in your functional component.

```javascript
import React, { useRef } from 'react';

function MyComponent() {
  const myRef = useRef(null);
  // ...
}
```

### 2. **Attach the Ref to a DOM Element**

You can attach the ref to a DOM element using the `ref` attribute. This allows you to access the DOM element directly through the ref object.

```javascript
import React, { useRef, useEffect } from 'react';

function MyComponent() {
  const inputRef = useRef(null);

  useEffect(() => {
    // Focus the input element when the component mounts
    inputRef.current.focus();
  }, []);

  return (
    <div>
      <input ref={inputRef} type="text" placeholder="Focus me on mount" />
    </div>
  );
}

export default MyComponent;
```

In this example:
- `inputRef` is created using `useRef(null)`.
- The `ref` attribute is used to attach `inputRef` to the `input` element.
- When the component mounts, `inputRef.current` refers to the `input` element, and we can call `focus()` on it.

### 3. **Using useRef to Store Mutable Values**

You can also use `useRef` to store mutable values that you want to persist across re-renders without causing a re-render when the value changes.

```javascript
import React, { useRef, useState, useEffect } from 'react';

function Timer() {
  const [seconds, setSeconds] = useState(0);
  const timerRef = useRef(null);

  useEffect(() => {
    timerRef.current = setInterval(() => {
      setSeconds(prev => prev + 1);
    }, 1000);

    return () => {
      clearInterval(timerRef.current);
    };
  }, []);

  return (
    <div>
      <p>Seconds: {seconds}</p>
      <button onClick={() => clearInterval(timerRef.current)}>Stop Timer</button>
    </div>
  );
}

export default Timer;
```

In this example:
- `timerRef` is created using `useRef(null)`.
- The interval ID is stored in `timerRef.current`.
- The interval is cleared when the component unmounts or when the "Stop Timer" button is clicked.

### 4. **Accessing Previous State Values**

You can use `useRef` to keep track of the previous state or prop values.

```javascript
import React, { useRef, useEffect, useState } from 'react';

function PreviousValue() {
  const [count, setCount] = useState(0);
  const prevCountRef = useRef();

  useEffect(() => {
    prevCountRef.current = count;
  }, [count]);

  const prevCount = prevCountRef.current;

  return (
    <div>
      <p>Current Count: {count}</p>
      <p>Previous Count: {prevCount}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

export default PreviousValue;
```

In this example:
- `prevCountRef` is created using `useRef()`.
- Inside the `useEffect` hook, `prevCountRef.current` is updated to the current `count` value whenever `count` changes.
- The `prevCount` variable holds the previous value of `count`.

### Summary

1. **Create the Ref**: Use `useRef(initialValue)` to create a ref.
2. **Attach the Ref to a DOM Element**: Use the `ref` attribute to attach the ref to a DOM element.
3. **Use the Ref to Access or Store Values**:
   - For DOM elements, you can manipulate them directly via `ref.current`.
   - For mutable values, you can store any value in `ref.current` without causing re-renders.
4. **Access Previous State Values**: Use `useRef` to keep track of previous state or prop values.

Using `useRef` effectively allows you to interact with the DOM and manage mutable values in a way that doesn’t interfere with the React component’s lifecycle and re-rendering behavior.