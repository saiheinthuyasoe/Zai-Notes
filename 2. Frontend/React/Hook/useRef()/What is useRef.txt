`useRef` is a React Hook that allows you to create a mutable object that persists across re-renders of a functional component. This hook is useful for accessing and manipulating DOM elements directly and for storing mutable values that do not cause a re-render when updated.

### Syntax

```javascript
const myRef = useRef(initialValue);
```

- `initialValue`: The initial value you want the ref object to hold. This value is optional and can be anything (e.g., `null`, a DOM element, a number).

### Returns

`useRef` returns a mutable ref object with a `current` property that can be used to store the reference value.

### When to Use `useRef`

1. **Accessing DOM Elements**:
   - Use `useRef` to directly access a DOM element and perform imperative actions like focusing an input, scrolling, or manipulating the DOM.

2. **Storing Mutable Values**:
   - Use `useRef` to store values that you want to persist across renders without causing the component to re-render when the value changes. This is useful for things like timers, previous state values, or any other mutable value.

3. **Avoiding Re-Renders**:
   - Use `useRef` to store values that do not affect the UI and do not need to trigger a re-render when updated.

### Example 1: Accessing DOM Elements

```javascript
import React, { useRef, useEffect } from 'react';

function FocusInput() {
  const inputRef = useRef(null);

  useEffect(() => {
    // Focus the input element when the component mounts
    inputRef.current.focus();
  }, []);

  return (
    <input type="text" ref={inputRef} />
  );
}

export default FocusInput;
```

In this example:
- `useRef(null)` creates a ref object with an initial value of `null`.
- The `ref` attribute is assigned to the `input` element.
- `useEffect` is used to focus the input element when the component mounts.

### Example 2: Storing Mutable Values

```javascript
import React, { useRef, useState, useEffect } from 'react';

function Timer() {
  const [seconds, setSeconds] = useState(0);
  const timerRef = useRef(null);

  useEffect(() => {
    timerRef.current = setInterval(() => {
      setSeconds(prev => prev + 1);
    }, 1000);

    return () => {
      clearInterval(timerRef.current);
    };
  }, []);

  return (
    <div>
      <p>Seconds: {seconds}</p>
      <button onClick={() => clearInterval(timerRef.current)}>Stop Timer</button>
    </div>
  );
}

export default Timer;
```

In this example:
- `useRef(null)` creates a ref object to store the interval ID.
- The interval is set in `useEffect`, and the interval ID is stored in `timerRef.current`.
- The interval is cleared when the component unmounts or when the "Stop Timer" button is clicked.

### Summary

- **Accessing DOM Elements**: `useRef` allows you to directly interact with DOM elements by storing references to them.
- **Storing Mutable Values**: `useRef` is useful for storing values that need to persist across renders without causing re-renders.
- **Avoiding Re-Renders**: Since updating a ref does not trigger a re-render, `useRef` is ideal for scenarios where you need to manage mutable values without affecting the componentâ€™s lifecycle.

By understanding and using `useRef`, you can manage DOM interactions and mutable values more effectively in your React components, leading to cleaner and more efficient code.